package com.controllers;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dao.ElectionDao;
import com.model.Election;

@RestController
@RequestMapping("/election")
@CrossOrigin(origins = "http://localhost:4200")
public class ElectionController {

    @Autowired
    private ElectionDao electionDao;

    @PostMapping("/addElection")
    public ResponseEntity<String> addElection(@RequestBody Election election) {
        try {
            electionDao.addElection(election);
            return ResponseEntity.ok("Election added successfully");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error occurred: " + e.getMessage());
        }
    }

    @GetMapping("/getAllElections")
    public List<Election> getAllElections() {
        return electionDao.getAllElections();
    }

    @GetMapping("/findById/{electionId}")
    public ResponseEntity<?> getElectionById(@PathVariable Long electionId) {
        Optional<Election> election = electionDao.getElectionById(electionId);
        if (election.isPresent()) {
            return ResponseEntity.ok(election.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/findByName/{electionName}")
    public List<Election> getElectionByName(@PathVariable String electionName) {
        return electionDao.getElectionByName(electionName);
    }

    @GetMapping("/findByDate/{electionDate}")
    public List<Election> getElectionByDate(@PathVariable String electionDate) {
        // Parse the date from the path variable and pass it to the service
        return electionDao.getElectionByDate(LocalDate.parse(electionDate));
    }

    @DeleteMapping("/deleteelection/{electionId}")
    public ResponseEntity<String> deleteElectionById(@PathVariable Long electionId) {
        try {
            electionDao.deleteElectionById(electionId);
            return ResponseEntity.ok("Election deleted successfully");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error occurred: " + e.getMessage());
        }
    }

    @GetMapping("/electionenddate")
    public String getElectionEndDate() {
        return "March 20, 2024";
    }
}
